% File descrambler.m
%**************************************************************************
% This script descrambles the codeword q as described in 10.2.3.1 - 36211-e70_s09-sxx
%                                                    and 7.2- 36211-e70_s06-s08.
% Author: Reem Saleh
% Date: 15/2/2022
%
% The generator polynomials of the Golden sequence is: G1(x)=x^31+x^28+1
%                                                      G2(x)=x^31+x^30+x^29+x^28+1. 
%
% Steps are:
% 1 - Initialize the two LFSRs to specified values
% 2 - initalization step of the descrambler runs for 1600 cycles until the
%     code reaches the desired sequence
% 3 - the golden sequence is generated by XORing the x1 and x2 registers 
% 4 - The Codeword is descrambler by being XORed with the golden sequence
%**************************************************************************
%% Scrambler
%codeword= [ones(1,12) zeros(1,12) ones(1,12) zeros(1,12) ones(1,12) zeros(1,12) ones(1,12) zeros(1,12)];
codeword=[0 0 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 ];
% Intialization parameters 
MPN = length(codeword);
Nc  = 1600;
samples = MPN+Nc;

% Register Intialization values 
CellID=1;                           %Cell ID "upper layer parameter"
N_CellID= de2bi(CellID,9,'left-msb');
NS = 2 ;                            %Slot number within a radio frame
Ns=floor(NS/2);
ns= de2bi(Ns,4,'left-msb');
NF=100;                             %System frame number
nf = mod(NF,2);
RNTI= 1000;                         %Radio Network temporary identifier "upper layer parameter"
n_RNTI= de2bi(RNTI,16,'left-msb');  %1 user NPDSCH transmissions indicated by RNTI=1000;
%% MATLAB built-in function
pn1_init = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1];
pn2_init = [[0] n_RNTI nf ns N_CellID];

pnSequence1 = comm.PNSequence('Polynomial',[31 3 0],'InitialConditions',pn1_init,'SamplesPerFrame',samples);
pnSequence2 = comm.PNSequence('Polynomial',[31 3 2 1 0],'InitialConditions',pn2_init,'SamplesPerFrame',samples);
x1 = pnSequence1();
x2 = pnSequence2();

goldenSeq = bitxor(x1(Nc+1:samples),x2(Nc+1:samples));
scrambled_matlab=bitxor(goldenSeq,codeword');
%% Scrambler written in RTL illustrative form
x1 = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1];
x2 = [[0] n_RNTI nf ns N_CellID];

 for itr = 1:samples
    xor_x1 = bitxor(x1(31),x1(28));
    xor_x2 = bitxor(bitxor(x2(31),x2(30)),bitxor(x2(29),x2(28)));
    goldenSeq_D(itr) = xor(x1(31),x2(31));
    x1 = [xor_x1 x1(1:30)];
    x2 = [xor_x2 x2(1:30)];
 end
scrambled=bitxor(goldenSeq_D(Nc+1:end),codeword)
%% representing scrambled data
subplot(2,1,1)
stairs(scrambled_matlab,'LineWidth',2) 
axis([0 22 0 1.25])
grid on;
subplot(2,1,2)
stairs(scrambled,'LineWidth',2) 
axis([0 22 0 1.25])
grid on;
%% De-scrambler written in RTL illustrative form
x1 = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1];
x2 = [[0] n_RNTI nf ns N_CellID];

 for itr = 1:samples
    xor_x1 = bitxor(x1(31),x1(28));
    xor_x2 = bitxor(bitxor(x2(31),x2(30)),bitxor(x2(29),x2(28)));
    goldenSeq_D(itr) = xor(x1(31),x2(31));
    x1 = [xor_x1 x1(1:30)];
    x2 = [xor_x2 x2(1:30)];
 end
descrambled=bitxor(goldenSeq_D(Nc+1:end),scrambled);
[descrambled]